import asyncio
import logging
import os
from time import time

from aiogram import Bot, Dispatcher, F
from aiogram.enums.chat_type import ChatType
from aiogram.types import ChatMemberMember, ContentType, CallbackQuery, BotCommand
from aiogram.types import Message, ChatMemberUpdated, User
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.filters import Command

from bot_db import BotDataBase
from bot_time import *
from bot_utils import TaskData, convert_message, cut_list_dicts, DeleteTaskData
from bot_filters import ChatTypeFilter, HashtagFilter


TOKEN = os.environ["TOKEN"]
logging.basicConfig(
    level=logging.INFO,
    # filename='bot.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
bot = Bot(token=TOKEN)
dp = Dispatcher()
db = BotDataBase()


@dp.message(Command(commands="start"), ChatTypeFilter(ChatType.PRIVATE))
async def cmd_start_private(message: Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.\n/help"
    )


@dp.message(Command(commands="start"), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_start_private(message: Message):
    await bot.send_message(message.chat.id, "–Ø –≤ –≥—Ä—É–ø–ø–µ! –í–≤–µ–¥–∏—Ç–µ /help")


@dp.message(Command(commands="help"), ChatTypeFilter([ChatType.PRIVATE, ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_help(message: Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç - –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –í–∞—à–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–µ–ª –≤ –≥—Ä—É–ø–ø–µ Telegram. "
                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É Telegram. "
                         "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–∞—Ç—å –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –∞ –∏–º–µ–Ω–Ω–æ: —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, "
                         "—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                         "\n"
                         "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                         "* /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
                         "* /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–æ–º\n"
                         "* /status - –£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é\n"
                         "* /new_task - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n"
                         "* /mydailywork - –¢–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ /new_task\n"
                         "\n"
                         "#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏\n"
                         "–ü–æ–º–∏–º–æ –∫–æ–º–∞–Ω–¥, –±–æ—Ç —Ç–∞–∫–∂–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ö–µ—à—Ç–µ–≥–∏: `#mydailywork` –∏ `#new_task`.\n"
                         "\n"
                         "–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n"
                         "#mydailywork –í—ã–ø–æ–ª–Ω–∏–ª –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
                         "/new_task –í—ã–ø–æ–ª–Ω–∏–ª –µ—â—ë –æ–¥–Ω–æ –∫—Ä—É—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
                         "\n"
                         "–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ –∫ —Ö–µ—à—Ç–µ–≥–∞–º –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                         "–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫ –Ω–µ–º—É –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º "
                         "–æ–¥–Ω–æ–≥–æ –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤ —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                         "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                         "\n"
                         "–í –∫–æ–Ω—Ü–µ –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ "
                         "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –í–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –Ω–∞–±—Ä–∞—Ç—å –≤–∞–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤, "
                         "–µ—Å–ª–∏ —Å–æ—á—Ç—É—Ç –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º.")


@dp.message(Command(commands=["new_task", "mydailywork"]), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
@dp.message(ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]),
            F.content_type.in_([ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT]),
            HashtagFilter(["new_task", "mydailywork"]))
async def create_task(message: Message):
    logging.debug(message)
    # –°—Ä–∞–∑—É –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return

    me: User = await bot.get_me()
    keys: tuple = (
        "/new_task",
        "/mydailywork",
        "#new_task",
        "#mydailywork",
        f"@{me.username}"  # –ò–º—è –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ —á–µ—Ä–µ–∑ /command@bot_name
    )

    try:
        text = convert_message(message.html_text, keys)

    except SyntaxError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!\n"
            "–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n"
            "<u>#new_task –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</u>\n"
            "/help - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )
        return

    except ValueError:
        await message.answer(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!\n"
            "–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n"
            "<u>#new_task –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</u>\n"
            "/help - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    db.user_remember(
        user_id=message.from_user.id,
        group_id=message.chat.id
    )
    task = db.task_add(
        user_id=message.from_user.id,
        group_id=message.chat.id,
        description=text,
        time=time()
    )
    logging.debug(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: {text}")

    task_data = TaskData(
        num=task[0],
        user_id=message.from_user.id,
        time=task[1]
    )

    user = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>"

    answer_text = f"{user} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!\n\n" \
                  f"{text}\n" \
                  f"#task"

    # Inline –ö–Ω–æ–ø–∫–∞
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü–æ–ª–µ–∑–Ω–æ!",
        callback_data=task_data.pack()
    )

    # –ï—Å–ª–∏ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if message.photo:
        await message.answer_photo(
            photo=message.photo[0].file_id,
            caption=answer_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            answer_text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=builder.as_markup()
        )

    # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ –Ω–µ —É–¥–∞–ª—è–µ–º
    # –¢–∞–∫–∂–µ –¥—Ä—É–≥–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è
    if message.content_type in (ContentType.TEXT, ContentType.PHOTO):
        result: bool = await message.delete()
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –∏–∑ —á–∞—Ç–∞ {message.chat.id} –Ω–µ —É–¥–∞–ª–µ–Ω–æ!") if not result else ...


@dp.message(Command(commands=["status"]), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_status(message: Message):
    db.user_remember(message.from_user.id, message.chat.id)

    day: Time = calculate_new_day()
    week: Time = calculate_new_week()

    value_day = db.value_by_time(message.from_user.id, message.chat.id, day.start, day.end)
    value_week = db.value_by_time(message.from_user.id, message.chat.id, week.start, week.end)

    await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤:\n"
                        f"–ó–∞ –¥–µ–Ω—å: {value_day}\n"
                        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {value_week}\n")


@dp.message(Command(commands="delete"), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_delete(message: Message):
    day: Time = calculate_new_day()
    # num, user_id, group_id, desc, value, time
    tasks: list[tuple | None] = db.tasks_by_time(message.from_user.id, message.chat.id, day.start, day.end)

    if not tasks:
        await message.answer("–£–≤—ã, –Ω–æ —É –í–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å!")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        del_task_data = DeleteTaskData(
            num=task[0],
            user_id=task[1]
        )
        btn = InlineKeyboardButton(
            text=task[3],
            callback_data=del_task_data.pack()
        )
        builder.row(btn)

    new_message = await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ",
        reply_markup=builder.as_markup()
    )

    await asyncio.sleep(5*60)
    await message.delete()
    await new_message.delete()


@dp.message(Command(commands="vacation_add"), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_vacation_add(message: Message):
    text: list[str] = message.text.split(" ")
    if len(text) != 2 or not text[1].isdigit() or (days := int(text[1])) <= 0:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n–ù—É–∂–Ω–æ:\n"
                             "/vacation_add <–¥–Ω–∏ –æ—Ç–ø—É—Å–∫–∞>\n"
                             "–ì–¥–µ –¥–Ω–∏ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö")
        return

    result = db.vacation_add(message.from_user.id, message.chat.id, days)
    if result[0]:
        await message.answer(f"–û—Ç–ø—É—Å–∫ —Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–¥–µ–ª—å–µ–º {result[1]} –¥–Ω—è(–µ–π)!")
    else:
        await message.answer(f"–£ –í–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –æ—Ç–ø—É—Å–∫, –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è {result[1]} –¥–Ω—è(–µ–π)!")


@dp.message(Command(commands="vacation_status"), ChatTypeFilter([ChatType.GROUP, ChatType.SUPERGROUP]))
async def cmd_vacation_status(message: Message):
    if (status := db.vacation_status(message.from_user.id, message.chat.id)) is None:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞!")
    else:
        await message.answer(f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {status} –¥–Ω—è(–µ–π) –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–ø—É—Å–∫–∞!")


@dp.my_chat_member
async def chat_update(update: ChatMemberUpdated):
    if update.new_chat_member.status == ChatMemberMember.MEMBER:
        if not db.group_check(update.chat.id):
            db.group_add(update.chat.id)
            logging.info(f"–ù–æ–≤—ã–π —á–∞—Ç: {update.chat.id}")
        else:
            db.group_update(update.chat.id, status=True)
            logging.info(f"–ß–∞—Ç {update.chat.id} –±—ã–ª —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω")

    elif update.new_chat_member.status in [ChatMemberMember.RESTRICTED, ChatMemberMember.KICKED,
                                           ChatMemberMember.BANNED, ChatMemberMember.LEFT]:
        db.group_update(update.chat.id, status=False)
        logging.info(f"–ß–∞—Ç {update.chat.id} –≤—ã–≥–Ω–∞–ª –±–æ—Ç–∞")
        logging.info(f"–°—Ç–∞—Ç—É—Å: {update.new_chat_member.status}")


@dp.callback_query(TaskData.filter())
async def callback_rep(callback: CallbackQuery):
    data: TaskData = TaskData.unpack(callback.data)
    user_id = callback.from_user.id

    if user_id == data.user_id:
        await callback.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥!")
        return

    if db.task_get(data.num) is None:
        await callback.answer("–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
        return

    exist_rep: bool = db.rep_check(data.num, user_id)
    if exist_rep:
        db.rep_delete(data.num, user_id)
        db.task_update(data.num, -1)
        await callback.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å!")
    else:
        db.rep_add(data.num, user_id)
        db.task_update(data.num, +1)
        await callback.answer("–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è!")


@dp.callback_query(DeleteTaskData.filter())
async def callback_delete(callback: CallbackQuery):
    del_data: DeleteTaskData = DeleteTaskData.unpack(callback.data)

    if db.task_get(del_data.num) is None:
        await callback.answer("–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
        return

    db.task_delete(del_data.num)
    await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")


async def every_time(calc_time: callable, desc: str, rate: int):
    while True:
        t: Time = calc_time()
        await asyncio.sleep(t.sleep)
        groups = db.groups_by_status(status=True)

        async with asyncio.TaskGroup() as tg:
            for group in groups:
                group_id = group[1]
                users = db.users_by_group(group_id)

                tg.create_task(
                    group_sender(users, group_id, t.start, t.end, desc, rate)
                )


async def group_sender(users: tuple, group_id: int, t_start: float, t_end: float, desc: str, rate: int):
    logging.info(f"–ì—Ä—É–ø–ø–∞ {group_id} –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞ {desc}")

    data = []
    for user_id in users:
        value = db.value_by_time(user_id, group_id, t_start, t_end)
        member: ChatMemberMember = await bot.get_chat_member(group_id, user_id)

        data.append(
            {
                "value": value,
                "name": member.user.full_name,
                "id": member.user.id
            }
        )

    if not data:
        return

    data = sorted(data, key=lambda x: x["value"], reverse=True)
    data_good, data_bad = cut_list_dicts(data, "value", rate)
    del data

    if data_good:
        top = -1  # –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω–µ—Ç –Ω—É–ª—ë–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        remember = 0  # –ß–∏—Å–ª–æ —Ç–æ—á–Ω–æ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
        emoji = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è"]
        text_good = f"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ {desc}\n"
        for elem in data_good:
            # –ü—Ä–∏–º–µ—Ä: ü•á –ò–≤–∞–Ω - 10 –±.
            if (top < len(emoji) - 1) and (remember != elem["value"]):
                top += 1
            text_good += f" {emoji[top]} <a href='tg://user?id={elem['id']}'>{elem['name']}</a> - {elem['value']} –±.\n"
            remember = elem["value"]

        await bot.send_message(group_id, text_good, parse_mode="HTML")

    if data_bad:
        text_bad = f"–ê –≤–æ—Ç –∏ –±–µ–∑–¥–µ–ª—å–Ω–∏–∫–∏ –∑–∞ {desc}! –ü–æ–∫–∞–π—Ç–µ—Å—å –∏ –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π—Ç–µ!\n"
        lazybones = ", ".join(
            f"<a href='tg://user?id={elem['id']}'>{elem['name']}</a>" for elem in data_bad
        )

        await bot.send_message(group_id, text_bad + lazybones, parse_mode="HTML")


async def set_commands():
    await bot.set_my_commands(commands=[
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="new_task", description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é"),
        BotCommand(command="delete", description="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"),
        BotCommand(command="vacation_add", description="–°–æ–∑–¥–∞—Ç—å –æ—Ç–ø—É—Å–∫"),
        BotCommand(command="vacation_status", description="–°—Ç–∞—Ç—É—Å –æ—Ç–ø—É—Å–∫–∞"),
    ])


async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await set_commands()
    async with asyncio.TaskGroup() as tg:
        tg.create_task(every_time(calculate_new_day, "–¥–µ–Ω—å", 1))
        tg.create_task(every_time(calculate_new_week, "–Ω–µ–¥–µ–ª—é", 7))
        tg.create_task(dp.start_polling(bot))


if __name__ == "__main__":
    asyncio.run(main())
